<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>LAMP - Apache</title>
<style>
body            {margin: 0 auto; float: left; max-width: 1000px; padding: 4%; border: #CCC thin solid;}
p               {line-height: 1.3;}
code            {display: block; background-color: #EEE; padding: 0.5em; border: #CCC thin solid; border-radius: 3px;}
p code, li code {display: inline; color: #800; padding: 0.15em;}
li pre code     {display: block; color: #000; padding: 0.15em;}
table, th, td   {background-color: #EEC; border: #CCC thin solid; border-collapse: collapse; padding: 0.15em;}
hr              {height: 0.2em; background-color: #CCC; border: 0; margin: 2em 0 2em 0;}
figcaption      {font-size: 0.8em; color: #888;}
warning         {display: block; background: yellow; line-height: 1.3em; border: 0.2em solid #CCC; padding: 0.4em;}
img             {border: 0.1em solid #CCC;}
#rev            {float:right; font-size: 0.8em; color: #888;}
</style>
</head>
<body>
<header id="title-block-header">
<h1 class="title">LAMP - Apache</h1>
</header>
<nav id="TOC" role="doc-toc">
<ul>
<li><a href="#apache-einrichten">Apache einrichten</a>
<ul>
<li><a href="#apache-im-dateisystem">Apache im Dateisystem</a></li>
<li><a href="#verbindung-zum-server">Verbindung zum Server</a></li>
<li><a href="#apache-konfiguration">Apache Konfiguration</a></li>
</ul></li>
<li><a href="#benutzer-und-rechte">Benutzer und Rechte</a>
<ul>
<li><a href="#mit-cms">Mit CMS</a></li>
<li><a href="#ohne-cms">Ohne CMS</a></li>
</ul></li>
<li><a href="#sicherheit">Sicherheit</a>
<ul>
<li><a href="#standard-konfiguration-in-apache">Standard Konfiguration in Apache</a></li>
<li><a href="#weitere-konfigurationen">Weitere Konfigurationen</a></li>
<li><a href="#https-verwenden">HTTPS verwenden</a></li>
<li><a href="#sicherheits-tipps">Sicherheits Tipps</a></li>
</ul></li>
<li><a href="#quellen">Quellen:</a></li>
</ul>
</nav>
<p>ANFANG INFOBEREICH FÜR DIE AUTOREN<br />
Dieser Bereich ist vor der Veröffentlichung zu entfernen !!!<br />
<strong>Status: RC2</strong></p>
<p>Änderungen 2020-12 bis 2021-01:</p>
<ul>
<li>Inhalt überarbeitet.<br />
</li>
<li>Für die Verwendung mit pandoc optimiert.</li>
</ul>
<p>ENDE INFOBEREICH FÜR DIE AUTOREN</p>
<hr />
<h2 id="apache-einrichten">Apache einrichten</h2>
<p>Diese Handbuchseite basiert auf Apache 2.4.46.</p>
<p>Unserem Beispiel aus der Installationsanleitung entsprechend, wollen wir einen <em>LAMP-Testserver für Entwickler</em> aufsetzen, der über LAN direkt mit dem Arbeitsplatz-PC verbunden ist. Darüber hinaus soll es aus Gründen der Sicherheit für den Server keine Verbindung zu einem lokalen Netzwerk oder gar zum Internet geben.<br />
Einzige Ausnahme: Der Server wird temporär und ausschließlich für System- und Software- Aktualisierungen über eine zweite Netzwerkschnittstelle mit dem Internet verbunden.</p>
<h3 id="apache-im-dateisystem">Apache im Dateisystem</h3>
<p>Debian hat die Dateien des Apache entsprechend ihrer Funktion vollständig in das Dateisystem integriert.</p>
<ul>
<li>In <strong>/usr/sbin/</strong> das ausführbare Programm <em>apache2</em>.<br />
</li>
<li>In <strong>/usr/lib/apache2/modules/</strong> die installierten Module für Apache.<br />
</li>
<li>In <strong>/usr/share/apache2/</strong> Dateien, die auch für andere Programme verfügbar sind.<br />
</li>
<li>In <strong>/etc/apache2/</strong> die Konfigurationsverzeichnisse und -dateien.<br />
</li>
<li>In <strong>/var/www/html/</strong> die vom Benutzer angelegte Webseite.</li>
<li>In <strong>/run/apache2/, /run/lock/apache2/</strong> zur Laufzeit notwendige Systemdateien.</li>
<li>In <strong>/var/log/apache2/</strong> verschiedene Log-Dateien.</li>
</ul>
<p>Wichtig ist die Unterscheidung zwischen den verwendeten Variablen <em>ServerRoot</em> und <em>DocumentRoot</em>.</p>
<p><strong>ServerRoot</strong> ist das Konfigurationsverzeichnis, also “<em>/etc/apache2/</em>”.<br />
<strong>DocumentRoot</strong> beinhaltet die Webseitendaten, also “<em>/var/www/html/</em>”.</p>
<h3 id="verbindung-zum-server">Verbindung zum Server</h3>
<p>Die Verbindung zwischen Testserver und PC wird in das IPv4-Netzwerksegment <strong>192.168.3.xxx</strong> gelegt, während die Internetverbindung des PC außerhalb dieses Netzwerksegmentes erfolgt. Die verwendeten Daten sind:</p>
<p><strong>Server</strong><br />
IP: 192.168.3.1/24<br />
Name: server1.org<br />
Alias: www.server1.org</p>
<p><strong>PC</strong><br />
IP: 192.168.3.10/24<br />
Name: pc1</p>
<p>Wir legen von der Datei <em>/etc/hosts</em> auf dem Server und auf dem PC eine Sicherungskopie an und fügen beiden die notwendigen Zeilen hinzu.</p>
<ul>
<li><p>Server <em>/etc/hosts</em>:</p>
<pre><code># cp /etc/hosts /etc/hosts_$(date +%f)
# echo &quot;192.168.3.1 server1.org   www.server1.org&quot; &gt;&gt; /etc/hosts
# echo &quot;192.168.3.10 pc1&quot; &gt;&gt; /etc/hosts</code></pre></li>
<li><p>PC <em>/etc/hosts</em>:</p>
<pre><code># cp /etc/hosts /etc/hosts_$(date +%f)
# echo &quot;192.168.3.1 server1.org   www.server1.org&quot; &gt;&gt; /etc/hosts</code></pre></li>
</ul>
<p>Als nächstes geben wir im <em>NetworkManager</em> die Daten für den Server in die rot umrandeten Feldern ein. Die Methode wird von “<em>Automatisch (DHCP)</em>” auf “<em>Manuell</em>” geändert und in die Adressfelder tragen wir die zu Beginn genannten Werte ein.</p>
<figure>
<img src="../../static/images-de/lamp_apache-de/server_lan.png" alt="" /><figcaption>Server - Dateneingabe im NetworkManager</figcaption>
</figure>
<p>Zusätzlich sollte im Reiter “<em>Allgemein</em>” die Option “<em>Automatisch mit Priorität verbinden</em>” aktiviert sein.<br />
Sinngemäß nehmen wir am PC die entsprechenden Einstellungen für die verwendete LAN-Schnittstelle vor.</p>
<p>Am PC testen wir die Verbindung in der Konsole mit</p>
<pre><code>$ ping -c3 www.server1.org</code></pre>
<p>und bei Erfolg prüfen wir gleich die Funktion von Apache, indem wir in die Adresszeile des Webbrowsers “<em>http://www.server1.org/index.html</em>” eingeben.</p>
<p>Die Apache-Begrüßungsseite mit “<em>It works!</em>” sollte erscheinen.</p>
<h3 id="apache-konfiguration">Apache Konfiguration</h3>
<p>Die Konfigurationsdateien und -verzeichnisse befindet sich im “<em>ServerRoot</em>” Verzeichnis “<em>/etc/apache2/</em>”.<br />
Die zentrale Konfigurationsdatei ist “<em>apache2.conf</em>”. Sie wird in der Regel nicht bearbeitet, da viele Konfigurationen in separaten Dateien vorliegen. Die Aktivierung und Deaktivierung erfolgt über Sym-Links. Das hat den Vorteil, dass eine Reihe verschiedener Konfigurationen vorhanden sind und nur die benötigten eingebunden werden.</p>
<p>Bei den Konfigurationsdateien handelt es sich um Textdateien, welche mit einem Editor und Root-Rechten angelegt bzw. editiert werden. Der Name der Datei darf beliebig sein, aber die Dateiendung muss “<em>.conf</em>” lauten. Die gültigen Direktiven, die in den Konfigurationsdateien verwendet werden dürfen, beschreibt die <a href="https://httpd.apache.org/docs/current/de/">Apache Dokumentation</a> ausführlich.</p>
<p>Die Dateien liegen in den Verzeichnissen</p>
<p>“<em>/etc/apache2/conf-available</em>”,<br />
“<em>/etc/apache2/mods-available</em>” und<br />
“<em>/etc/apache2/sites-available</em>”.</p>
<p>Ihre Aktivierungs-Links finden wir in</p>
<p>“<em>/etc/apache2/conf-enable</em>”,<br />
“<em>/etc/apache2/mods-enable</em>” und<br />
“<em>/etc/apache2/sites-enable</em>”.</p>
<p>Um eine .conf-Datei zu aktivieren bzw. deaktivieren benutzen wir die Befehle “<em>a2enconf</em>” und “<em>a2disconf</em>”. Das erstellt oder entfernt die Aktivierungs-Links.</p>
<pre><code># a2enconf NAME_DER_DATEI.conf </code></pre>
<p>Aktiviert die Konfiguration. Die Deaktivierung erfolgt entsprechend mit:</p>
<pre><code># a2disconf NAME_DER_DATEI.conf </code></pre>
<p>In gleicher Weise verfahren wir bei Modulen und Virtual-Hosts mit den Befehlen “<em>a2enmod</em>”, “<em>a2ensite</em>” und “<em>a2dismod</em>”, “<em>a2dissite</em>”.</p>
<p>Der Apache Webserver liest mit dem Befehl</p>
<pre><code># systemctl reload apache2.service</code></pre>
<p>die geänderte Konfiguration ein.</p>
<p>Nun kommen wir wieder auf unseren <em>LAMP-Testserver für Entwickler</em> zurück und passen die Konfiguration an die Serverdaten an.</p>
<ol type="1">
<li><p>Datei “<em>/etc/apache2/apache2.conf</em>”</p>
<p>Es ist eine der wenigen Ausnahmen die <em>apache2.conf</em> zu editieren. Wir fügen zu Beginn des Abschnits <em>Global configuration</em> die folgende Zeile ein:</p>
<pre><code>ServerName 192.168.3.1</code></pre>
<p>Hiermit teilen wir dem Apache-Webserver die IP-Adresse mit, unter der das Entwicklungsprojekt erreichbar sein soll und unterdrücken Umleitungen zur IP 127.0.1.1 mit Fehlermeldungen.</p></li>
<li><p>Neue “<em>sites</em>”-Datei</p>
<p>Mit dem Texteditor unserer Wahl erstellen wir die Datei “<em>/etc/apache2/sites-available/server1.conf</em>” z. B.</p>
<pre><code># mcedit /etc/apache2/sites-available/server1.conf</code></pre>
<p>und fügen den folgenden Inhalt ein, speichern die Datei und beenden den Editor.</p>
<pre><code>&lt;VirtualHost *:80&gt;
    ServerName server1.org
    ServerAlias www.server1.org
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html
    ErrorLog ${APACHE_LOG_DIR}/error_server1.log
    CustomLog ${APACHE_LOG_DIR}/access_server1.log combined
&lt;/VirtualHost&gt;</code></pre>
<p>Anschließend stellen wir die Konfiguration auf den neuen “<em>VirtualHost</em>” um und geben die Änderungen dem Apache Webserver bekannt.</p>
<pre><code># a2ensite server1.conf 
  Enabling site server1.
[...]

# a2dissite 000-default.conf 
  Site 000-default disabled.
[...]

# systemctl reload apache2.service</code></pre></li>
</ol>
<hr />
<h2 id="benutzer-und-rechte">Benutzer und Rechte</h2>
<p>Der Apache Webserver läuft mit der USER.GROUP “<em>www-data.www-data</em>” und “<em>DocumentRoot</em>” gehört unmittelbar nach der Installation “<em>root.root</em>”.<br />
Um Benutzern Schreibrechte für die in “<em>DocumentRoot</em>” enthaltenen Dateien zu gegeben, sollte dafür eine neue Gruppe angelegt werden. Es ist nicht sinnvoll die bestehende Gruppe “<em>www-data</em>” zu nutzten, da mit den Rechten dieser Gruppe Apache läuft.<br />
Wir nennen die neue Gruppe “<em>developer</em>”.</p>
<h3 id="mit-cms">Mit CMS</h3>
<p>Wird ein Content-Management-System (Software zur gemeinschaftlichen Bearbeitung von Webseiten-Inhalten) hinzugefügt, bereiten wir “<em>DocumentRoot</em>” entsprechend vor:</p>
<ol type="1">
<li><p>Gruppe anlegen und dem Benutzer zuweisen.</p>
<pre><code># groupadd developer
# adduser BENUTZERNAME developer
# chgrp developer /var/www/html</code></pre>
<p>Um die neuen Rechte zu aktivieren, muss man sich einmal ab- und neu anmelden oder als Benutzer den Befehl newgrp verwenden.</p>
<pre><code>$ newgrp developer</code></pre></li>
<li><p>SGID-Bit für “<em>DocumentRoot</em>” setzen,<br />
damit alle hinzukommenden Verzeichnisse und Dateien die Gruppe “<em>developer</em>” erben.</p>
<pre><code># chmod g+s /var/www/html</code></pre></li>
<li><p>Eigentümer und Dateirechte anpassen,<br />
damit Unbefugte keinen Zugriff erhalten und der Apache Webserver einwandfrei läft.<br />
Wir schauen uns die derzeitigen Rechte an:</p>
<pre><code># ls -la /var/www/html
insgesamt 24
drwxr-sr-x 2 root developer  4096  9. Jan 19:32 .           (DocumentRoot mit SGID-Bit)
drwxr-xr-x 3 root root       4096  9. Jan 19:04 ..          (Das übergeordnete Verzeichnis /var/www)
-rw-r--r-- 1 root developer 10701  9. Jan 19:04 index.html
-rw-r--r-- 1 root developer    20  9. Jan 19:32 info.php</code></pre>
<p>Wir ändern für “<em>DocumentRoot</em>” den Eigentümer zu “<em>www-data</em>”, geben der Gruppe Schreibrecht und entziehen allen anderen auch das Leserecht. Alles rekursiv.</p>
<pre><code># chown -R www-data /var/www/html
# chmod -R g+w /var/www/html
# chmod -R o-r /var/www/html</code></pre>
<p>Das Ergebnis überprüfen wir noch einmal.</p>
<pre><code># ls -la /var/www/html
insgesamt 24
dr-xrws--x 2 www-data developer  4096  9. Jan 19:32 .
drwxr-xr-x 3 root     root       4096  9. Jan 19:04 ..
-rw-rw---- 1 www-data developer 10701  9. Jan 19:04 index.html
-rw-rw---- 1 www-data developer    20  9. Jan 19:32 info.php</code></pre>
<p>Jetzt haben in “<em>DocumentRoot</em>” nur Mitglieder der Gruppe “<em>developer</em>” Schreibrecht, der Apache Webserver kann die Dateien lesen und schreiben, allen anderen wird der Zugriff verweigert.</p></li>
<li><p>Nachteile dieser Einstellungen</p>
<p>Beim Anlegen neuer Verzeichnisse und Dateien unterhalb “<em>DocumentRoot</em>” ist der Eigentümer der jeweilige “<em>User</em>” und nicht “<em>www-data</em>”. Dadurch kann der Apache-Webserver die Dateien nicht lesen.<br />
Abhilfe schafft eine “<em>Systemd Path Unit</em>”, die Änderungen unterhalb “<em>DocumentRoot</em>” überwacht und die Eigentümer- und Dateirechte anpasst.</p></li>
</ol>
<h3 id="ohne-cms">Ohne CMS</h3>
<p>Bei statischen Webseiten ist ein Content-Management-System vielfach nicht notwendig und bedeutet nur ein weiteres Sicherheitsrisiko und erhöhten Wartungsaufwand. Zusätzlich zu den zuvor getätigten Einstellungen kann dem Apache-Webserver das Schreibrecht an “<em>DocumentRoot</em>” entzogen werden, um die Sicherheit zu stärken, denn für den Fall, dass ein Angreifer eine Lücke in Apache findet, erhält er dadurch keine Schreibrechte in “<em>DocumentRoot</em>”.</p>
<pre><code># chmod -R u-w /var/www/html</code></pre>
<hr />
<h2 id="sicherheit">Sicherheit</h2>
<h3 id="standard-konfiguration-in-apache">Standard Konfiguration in Apache</h3>
<p>Wichtige Absicherungen enthält die Datei “<em>/etc/apache2/apache2.conf</em>” bereits standardmäßig.</p>
<p>Die nachfolgenden drei Direktiven verhindern den Zugang zum root-Dateisystem und geben dann die beiden vom Apache-Webserver verwendeten Verzeichnisse “<em>/usr/share</em>” und “<em>/var/www</em>” frei.</p>
<pre><code>&lt;Directory /&gt;
    Options FollowSymLinks
    AllowOverride None
    Require all denied
&lt;/Directory&gt;

&lt;Directory /usr/share&gt;
    AllowOverride None
    Require all granted
&lt;/Directory&gt;

&lt;Directory /var/www/&gt;
    Options Indexes FollowSymLinks
    AllowOverride None
    Require all granted
&lt;/Directory&gt;</code></pre>
<p>Die Optionen “<em>FollowSymLinks</em>” und “<em>Indexes</em>” bergen ein Sicherheitsrisiko und sollten geändert werden, sofern sie nicht unbedingt notwendig sind. Siehe weiter unten.</p>
<p>Die folgende Direktive unterbindet die Anzeige der Dateien “<em>.htaccess</em>” und “<em>.htpasswd</em>”.</p>
<pre><code>&lt;FilesMatch &quot;^\.ht&quot;&gt;
    Require all denied
&lt;/FilesMatch&gt;</code></pre>
<h3 id="weitere-konfigurationen">Weitere Konfigurationen</h3>
<ul>
<li><p>In der Datei <strong>/etc/apache2/apache2.conf</strong></p>
<p><strong>FollowSymLinks</strong> kann dazu führen, dass Inhalte außerhalb “<em>DocumentRoot</em>” gelistet werden.<br />
<strong>Indexes</strong> listet den Inhalt eines Verzeichnisses, sofern keine “<em>index.html</em>” oder “<em>index.php</em>” usw. vorhanden ist.</p>
<p>Es ist empfehlenswert “<em>FollowSymLinks</em>” zu entfernen und die Projektdaten alle unterhalb “<em>DocumentRoot</em>” abzulegen. Für die Option “<em>Indexes</em>” ist der Eintrag zu ändern in</p>
<pre><code>Options -Indexes</code></pre>
<p>wenn die Anzeige des Verzeichnisinhaltes <strong>nicht</strong> erwünscht ist.<br />
Alternativ erstellt man in dem Verzeichnis eine leere “<em>index</em>”-Datei, die an Stelle des Verzeichnisinhaltes an den Client ausgeliefert wird. Zum Beispiel für das “<em>upload</em>”-Verzeichnis:</p>
<pre><code>$ echo &quot;&lt;!DOCTYPE html&gt;&quot; &gt; /var/www/html/upload/index.html
     oder
$ echo &quot;&lt;?php&quot; &gt; /var/www/html/upload/index.php</code></pre></li>
<li><p>In der Host-Konfiguration <strong>/etc/apache2/sites-available/server1.conf</strong></p>
<p>können wir mit dem “<em>&lt;Directory&gt;</em>”-Block alle IP-Adressen sperren, außer die darin gelisteten.</p>
<pre><code>&lt;Directory &quot;/var/www/html&quot;&gt;
    Order deny,allow
    Deny from all
    Allow from 192.168.3.10
    Allow from 192.168.3.1
&lt;/Directory&gt;</code></pre></li>
<li><p><strong>“merging”</strong> der Konfiguration</p>
<p>Die Direktiven der Konfiguration verteilen sich auf eine ganze Reihe von Dateien innerhalb “<em>ServerRoot</em>” und auf die “<em>.htaccess</em>”-Dateien in “<em>DocumentRoot</em>”. Es ist deshalb besonders wichtig zu wissen an welcher Stelle die Direktive zu platzieren ist, um die gewünschte Wirkung zu erzielen.<br />
Wir empfehlen dringend die Webseite<br />
<a href="https://httpd.apache.org/docs/current/de/sections.html#merging">apache.org - How the sections are merged</a><br />
intensiv zu Rate zu ziehen.</p></li>
<li><p>Der <strong>Eigentümer</strong> von “<em>DocumentRoot</em>”</p>
<p>ist nach der Installion “<em>root.root</em>” und sollte unbedingt geändert werden. Siehe hierzu das Kapitel <a href="#benutzer-und-rechte">Benutzer und Rechte</a>.</p></li>
</ul>
<h3 id="https-verwenden">HTTPS verwenden</h3>
<p>Ohne HTTPS geht heute kein Webseitenprojekt an den Start.<br />
Wie man ein Zertifikat erlangt beschreibt die Webseite <a href="https://www.https-guide.de/">HTTP-Guide</a> ausführlich und leicht verständlich.</p>
<p>Wir legen zuerst die nötigen Ordner innerhalb “<em>DocumentRoot</em>” an:</p>
<pre><code># cd /etc/apache2/
/etc/apache2/# mkdir ssl ssl/certs ssl/privat</code></pre>
<p>In diesen legen wir die Certifikatsdatei <em>server1.org.crt</em> und den privaten Schlüssel <em>server1.org.key</em> ab.</p>
<p>Dann sichern wir die Verzeichnisse gegen unbefugten Zugriff.</p>
<pre><code>/etc/apache2/# chown -R root.root ssl
/etc/apache2/# chmod -R o-rwx ssl
/etc/apache2/# chmod -R g-rwx ssl
/etc/apache2/# chmod u-w ssl/certs/server1.org.crt
/etc/apache2/# chmod u-w ssl/private/server1.org.key</code></pre>
<p>Der ls-Befehl zur Kontrolle:</p>
<pre><code>/etc/apache2/# ls -la ssl
   insgesamt 20
   drwx------ 5 root root 4096 25. Jan 18:17 .
   drwxr-xr-x 9 root root 4096 25. Jan 18:43 ..
   drwx------ 2 root root 4096 25. Jan 18:16 certs
   drwx------ 2 root root 4096 25. Jan 18:16 private
   
/etc/apache2/# ls -l ssl/certs
   -r-------- 1 root root 1216 25. Jan 15:27 server1.org.crt</code></pre>
<h4 id="integration-in-apache2">Integration in Apache2</h4>
<p>Das ssl-Modul ist in Apache per default aktviert. Es genügt die Datei “<em>/etc/apache2/sites-available/server1.conf</em>” zu bearbeiten.</p>
<ul>
<li><p>Eine neue VirtualHost-Directive wird zu Beginn eingefügt. Diese leitet eingehende Client-Anfragen von Port 80 mittels “<em>Redirect</em>” auf Port 443 (ssl) weiter.</p></li>
<li><p>Die bisherige VirtualHost-Directive wird auf Port 443 umgeschrieben.</p></li>
<li><p>Nach den Standard Host-Anweisungen fügen wir die SSL-Anweisungen ein.</p></li>
<li><p>Für den Fall, dass unser Webprojekt dynamisch generierte Webseiten enthalten soll, werden die beiden letzten FileMatch- und Directory-Direktiven mit der “<em>SSLOptions</em>”-Anweisung eingefügt.</p></li>
</ul>
<p>Die erweiterte “<em>server1.conf</em>” weist dann folgenden Inhalt auf:</p>
<pre><code>&lt;VirtualHost *:80&gt;
    ServerName server1.org
    ServerAlias www.server1.org
    Redirect / https://server1.org/
&lt;/VirtualHost&gt;

&lt;VirtualHost *:443&gt;
    ServerName server1.org
    ServerAlias www.server1.org
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html
    ErrorLog ${APACHE_LOG_DIR}/error_server1.log
    CustomLog ${APACHE_LOG_DIR}/access_server1.log combined
    
    SSLEngine on
    SSLProtocol all -SSLv2 -SSLv3
    SSLCertificateFile      /etc/apache2/ssl/certs/server1.org.crt
    SSLCertificateKeyFile   /etc/apache2/ssl/private/server1.org.key
    
    &lt;Directory &quot;/var/www/html&quot;&gt;
        Order deny,allow
        Deny from all
        Allow from 192.168.3.10
        Allow from 192.168.3.1
    &lt;/Directory&gt;

    &lt;FilesMatch &quot;\.(cgi|shtml|phtml|php)$&quot;&gt;
        SSLOptions +StdEnvVars
    &lt;/FilesMatch&gt;

    &lt;Directory /usr/lib/cgi-bin&gt;
        SSLOptions +StdEnvVars
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</code></pre>
<p>Für den Fall, dass unser fertiges Projekt später bei einem Hoster ohne Zugriff auf “<em>ServerRoot</em>” liegt (das ist die Regel), können wir in “<em>DocumentRoot</em>” die Datei “<em>.htaccess</em>” um eine Rewrite-Anweisung ergänzen bzw. die Datei mit der Rewrite-Anweisung anlegen.</p>
<pre><code>&lt;IfModule mod_rewrite.c&gt;
RewriteEngine On
RewriteCond %{HTTPS} !=on
RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
&lt;/IfModule&gt;</code></pre>
<h3 id="sicherheits-tipps">Sicherheits Tipps</h3>
<ul>
<li><p>Die Apache Dokumentation enhält eine empfehlenswerte Seite mit diversen Tipps zur Absicherung.<br />
<a href="https://httpd.apache.org/docs/current/de/misc/security_tips.html">apache.org - Security Tipps</a> (englisch)</p></li>
<li><p>Darüber hinaus finden sich im Internet zahlreiche Hinweise zum sicheren Betrieb des Apache Webservers.</p></li>
<li><p>Die regelmäßige Kontrolle der Logdateien in “<em>/var/log/apache2/</em>” hilft um Fehler oder Sicherheitslücken zu erkennen.</p></li>
<li><p>Sollte der Server, anders als in dieser Handbuchseite vorgesehen, mit dem lokalen Netzwerk oder mit dem Internet verbunden werden, ist eine Firewall unerlässlich.</p></li>
</ul>
<hr />
<h2 id="quellen">Quellen:</h2>
<p><a href="https://httpd.apache.org/docs/current/de/">apache.org - Dokumentation</a> (teilweise deutsch)<br />
<a href="https://httpd.apache.org/docs/current/de/configuring.html">apache.org - Konfigurationsdateien</a><br />
<a href="https://httpd.apache.org/docs/2.4/ssl/ssl_howto.html">apache.org - SSL Howto</a><br />
<a href="https://www.https-guide.de/">HTTPS Guide - Servercertifikate erstellen und integrieren</a></p>
<hr />
<div id="rev">
Zuletzt bearbeitet: 2021-01-30
</div>
</body>
</html>
